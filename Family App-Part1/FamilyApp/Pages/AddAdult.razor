@page "/AddAdult"
@page "/AddAdult/{StreetNameF}/{HouseNumberF:int}"
@using FamilyApp.Data
@using FamilyApp.Models
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IFamilyService FamilyService


<EditForm Model="@newAdult" OnValidSubmit="@AddNewAdult">
        <DataAnnotationsValidator/>
                    <ValidationSummary/>
        <div class="form-group">
            Name<br/>
            <InputText @bind-Value="newAdult.FirstName"/>
        </div>
        <div class="form-group">
                    Lastname<br/>
                    <InputText @bind-Value="newAdult.LastName"/>
                </div>
     
        <div class="form-group">
            Age<br/>
            <InputNumber @bind-Value="newAdult.Age"/>
        </div>

       <div class="form-group">
                
                   <InputSelect class="form-control" id="sex" @bind-Value="@newAdult.Sex" style="width:200px">
                      <option value="gender" selected disabled>Gender</option>  
                       @foreach (var gender in genders)
                       {
                           <option value="@gender">@gender</option>
                       }
                   </InputSelect>
                                     </div>
        <div class="form-group">
            Height<br/>
            <InputNumber @bind-Value="newAdult.Height"/>
        </div>
        
        
         <div class="form-group">
                     Weight<br/>
                     <InputNumber @bind-Value="newAdult.Weight"/>
                 </div>
        
        <div class="form-group">
              
            <InputSelect class="form-control" id="hair" @bind-Value="@newAdult.HairColor" style="width:200px">
                 <option value="haircolor" selected disabled>Hair Color</option>  
                @foreach (var hair in validHairs)
                {
                    <option value="@hair">@hair</option>
                }
            </InputSelect>
                       </div>
       
        
       <div class="form-group">
           <InputSelect class="form-control" id="eye" @bind-Value="@newAdult.EyeColor" style="width:200px">
               <option value="eyecolor" selected disabled>Eye Color</option>  
               @foreach (var eye in validEyes)
               {
                   <option value="@eye">@eye</option>
               }

           </InputSelect>
           
                              </div>
        
        <div class="form-group">
                   <InputSelect class="form-control" id="job" @bind-Value="@newAdult.JobTitle" style="width:200px">
                       <option value="job" selected disabled>Job Title</option>  
                       @foreach (var job in jobs)
                       {
                           <option value="@job">@job</option>
                       }
        
                   </InputSelect>
        </div>
      
        <p class="actions">
                <button class="btn btn-outline-dark" type="submit">Add</button>
            </p>
        </EditForm>


@code {
    
    [Parameter]
    public string StreetNameF { get; set; }
    [Parameter]
    public int HouseNumberF { get; set; }
    public Family Family { get; set; }
    Adult newAdult=new Adult();
        
    protected override async Task OnInitializedAsync() {
        Family = await FamilyService.GetFamilyAsync(StreetNameF, HouseNumberF);
    }
    
    public void AddNewAdult()
    {
        Family.Adults.Add(newAdult);
        FamilyService.UpdateFamily(Family);
       // MemberService.AddAdultAsync(newAdult);
        
        NavigationManager.NavigateTo("/");
    }
    
    List<String> validHairs= new[] {"Blond", "Red", "Brown", "Black",
        "White", "Grey", "Blue", "Green", "Leverpostej"}.ToList();
   
    List<string> validEyes = new[] {"Brown", "Grey", "Green", "Blue",
        "Amber", "Hazel"}.ToList();

    List<string> genders = new[] {"M", "F"}.ToList();

    List<string> jobs = new[]
    {
        "Teacher", "Engineer", "Garbage Collector", "Shepherd", "Pilot", "Police Officer", "Pirate", "Fireman", "Astronaut",
        "Captain", "Soldier", "Pizza Chef", "Chef", "Ninja", "Doctor", "Janitor", "Factory Worker",
        "Chauffeur", "Waitress", "Nurse", "Chemist", "Caretaker", "Gardener", "Mascot", "Athlete", "Unemployed", "None"
    }.ToList();

}