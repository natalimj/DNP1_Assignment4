@page "/login"
@namespace LoginComponent
@using FamilyApp.Authentication
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <h3>Login</h3>
        <div class="form-group">
            User name<br/>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group">
            Password<br/>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color: #dc3545">@errorMessage</div>

        <button class="btn btn-outline-dark button-p"  @onclick="PerformLogin">
            Login
        </button>
        
    </NotAuthorized>
    
    
    <Authorized>
        <p class="mt-2 m home-font">@context.User.Identity.Name</p>
        <button class="btn btn-outline-dark ml-3" @onclick="PerformLogout">
            Log out
        </button>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }


}